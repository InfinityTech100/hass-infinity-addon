<div id="new-device-panel" class="hidden">
  <div class="container mx-auto p-4 flex flex-col space-y-4">
    <h1 class="text-4xl flex items-center space-x-1">
      <i class="material-icons">devices_other</i>
      <span>New Device</span>
    </h1>

    <label class="my-2">Device Name</label>
    <input
      id="device-name"
      type="text"
      placeholder="Enter your Device Name here"
      class="input input-bordered w-full mt-1"
    />

    <label class="my-2">Device Type</label>
    <input
      id="device-type"
      type="text"
      placeholder="Enter your device type here"
      class="input input-bordered w-full mt-1"
    />

    <label class="my-2">Cloud Dashboard ID</label>
    <input
      id="cloud-id"
      type="text"
      placeholder="Enter your cloud id for this device here"
      class="input input-bordered w-full mt-1"
    />

    <label class="form-control w-full">
      <div class="label">
        <span class="label-text">Device Source</span>
      </div>
      <select id="source" class="select select-bordered w-full mt-1">
        <option disabled selected>select source</option>
        <option>zigbee2mqtt</option>
        <option>Home-Hub</option>
      </select>
      <div class="label">
        <span class="label-text-alt">interface</span>
      </div>
    </label>

    <div id="property-mapping" class="">
      <div class="container mx-auto p-4">
        <h1 class="text-4xl mb-4">Properties Mapping</h1>

        <div class="mb-4">
          <button class="btn btn-primary" onclick="addRow()">
            Add property
          </button>
        </div>

        <table class="table-auto w-full" id="dynamicTable">
          <thead>
            <tr class="">
              <th class="px-4 py-2">Property Name</th>
              <th class="px-4 py-2">Attribute</th>
              <th class="px-4 py-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            <!-- Dynamic rows will be added here -->
          </tbody>
        </table>
      </div>
    </div>

    <button class="btn btn-primary mt-5 self-end" onclick="logTableValues()">
      Add Device
    </button>
  </div>
</div>

<script>
  async function addRow() {
    const table = document
      .getElementById("dynamicTable")
      .getElementsByTagName("tbody")[0];
    const newRow = table.insertRow();

    const cell1 = newRow.insertCell(0);
    const cell2 = newRow.insertCell(1);
    const cell3 = newRow.insertCell(2);

    // Create input field in cell 1
    cell1.innerHTML =
      '<input type="text" class="input  w-full" placeholder="Enter property name">';

    // Create select element in cell 2
    const selectElement = document.createElement("select");
    selectElement.className = "select select-bordered w-full";
    selectElement.id = "device_properties";
    cell2.appendChild(selectElement);

    try {
      // Fetch data from /discover
      const response = await fetch("/discover");
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();

      // Populate select options with entity_id values
      data.forEach((element) => {
        const option = document.createElement("option");
        option.value = element.entity_id;
        option.textContent = element.entity_id;
        selectElement.appendChild(option);
      });
    } catch (error) {
      console.error("Error fetching or parsing data:", error);
      // Optionally handle errors (e.g., show an error message)
    }

    // Create delete button in cell 3
    cell3.innerHTML =
      '<div class="flex justify-center"><button class="btn btn-danger" onclick="deleteRow(this)">Delete</button></div>';
  }

  function deleteRow(button) {
    const row = button.parentNode.parentNode.parentNode;
    row.parentNode.removeChild(row);
  }

  async function logTableValues() {
    const devName = document.getElementById("device-name");
    const devType = document.getElementById("device-type");
    const cloudid = document.getElementById("cloud-id");
    const devSrc = document.getElementById("source");

    let device = {
      name: devName.value,
      type: devType.value,
      cid: cloudid.value,
      source: devSrc.value,
      state: "offline",
      lastSeen: "12 mar 2024",
      properties: [],
    };

    const table = document.getElementById("dynamicTable");
    const rows = table
      .getElementsByTagName("tbody")[0]
      .getElementsByTagName("tr");

    for (let i = 0; i < rows.length; i++) {
      const cells = rows[i].getElementsByTagName("td");
      const propertyName = cells[0].getElementsByTagName("input")[0].value;
      const attribute = cells[1].getElementsByTagName("select")[0].value;
      device.properties.push({ hass: attribute, cloud: propertyName });
      console.log(
        `Row ${
          i + 1
        }: Property Name = ${propertyName}, Attribute = ${attribute}`
      );
    }
    console.log(device);

    try {
      const response = await fetch("/devices/", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(device),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      console.log("Success:", data);
    } catch (error) {
      console.error("Error:", error);
    }
  }
</script>

<script>
  document.getElementById("source").addEventListener("change", function () {
    const selectedValue = this.value;
    let x = document.getElementById("property-mapping");
    if (selectedValue === "Home-Hub") {
      console.log("show props");
      x.className = "";
    } else {
      console.log("dont");
      x.className = "hidden";
    }
  });
</script>
